#!/bin/bash

function g_files_modified_by() {
  local name="$1"
  git log --pretty="%H" --author=$name | while read commit_hash; do git show --oneline --name-only $commit_hash | tail -n+2; done | sort | uniq
}

function g_actual_branch() {
  git branch | sed -n '/\* /s///p'
}

function g_purge_branch() {
  git branch -D "${1}" && git push --delete origin "${1}"
}

function g_dir_assume_unchaged() {
  git update-index --assume-unchanged $(git ls-files | tr '\n' ' ')
}

function g_dir_no_assume_unchaged() {
  git update-index --no-assume-unchanged $(git ls-files | tr '\n' ' ')
}

function gpull() {
  # First remove the color codes from the git branch output and then stract the branch name
  local branch=$(git branch | git branch | sed -e 's/\x1b\[[0-9;]*m//g' | sed -En 's/\*[[:space:]](\[[0-9]*\][[:space:]][[:space:]]?)(.*)/\2/p')
  info "Pulling from origin $branch"
  git pull origin $branch
}

function gpush() {
  # First remove the color codes from the git branch output and then stract the branch name
  local branch=$(git branch | git branch | sed -e 's/\x1b\[[0-9;]*m//g' | sed -En 's/\*[[:space:]](\[[0-9]*\][[:space:]][[:space:]]?)(.*)/\2/p')
  info "Pushing to origin $branch"
  git push --recurse-submodules=on-demand origin $branch
}

function gpushf() {
  # First remove the color codes from the git branch output and then stract the branch name
  local branch=$(git branch | git branch | sed -e 's/\x1b\[[0-9;]*m//g' | sed -En 's/\*[[:space:]](\[[0-9]*\][[:space:]][[:space:]]?)(.*)/\2/p')
  info "Pushing to origin $branch"
  git push -f origin $branch
}

function gstash() {
  g stash apply && g stash drop
}

function gcheckout() {
  g fetch origin "${1}" && g checkout "${1}"
}

function g_cf() {

  if [[ "$2" == "js" ]]; then
    git checkout react/GMDJS-$1
  else
    git checkout feature/GM-$1
  fi
}

function g_ch() {

  if [[ "$2" == "js" ]]; then
    git checkout hotfix/GMDJS-$1
  else
    git checkout hotfix/GM-$1
  fi
}

function gsync() {

  info "Adding all files to index"
  git add .

  info "Committing files indexed"
  git commit -m "$(date +"%a %-d of %b of %Y at %X")"

  info "Syncing local changes with remote changes"
  gpull
  gpush
}

function gh_branches() {

  local user
  local project

  info "Type the user:"
  read user

  info "Type the project: "
  read project

  open https://github.com/$user/$project/branches
}

function gh_branches_compare() {

  local user
  local project
  local branch

  info "Type the user:"
  read user

  info "Type the project"
  read project

  info "Type the branch"
  read branch

  open https://github.com/$user/$project/compare/$branch
}

function gh_branches_compare_range() {

  local user
  local project
  local first_branch
  local second_branch

  info "Type the project"
  read project

  info "Type the first branch:"
  read first_branch

  info "Type the second branch:"
  read second_branch

  open https://github.com/allergan-data-labs/$project/compare/$first_branch...$second_branch
}

function gh_compare() {
  local project_name=$(git config --local remote.origin.url | sed -n 's#.*/\([^.]*\)\.git#\1#p')
  local branch=$(git branch | git branch | sed -e 's/\x1b\[[0-9;]*m//g' | sed -En 's/\*[[:space:]](\[[0-9]*\][[:space:]][[:space:]]?)(.*)/\2/p')

  info "Comparing main with $branch"
  open https://github.com/allergan-data-labs/$project_name/compare/main...$branch
}

function gh_commits() {

  local user
  local project
  local branch
  local author

  info 'Type the user:'
  read user

  info 'Type the project:'
  read project

  info 'Type the branch:'
  read branch

  info 'Type the author:'
  read author

  open https://github.com/$user/$project/commits/$branch\?author\=$author
}

g_assume_unchaged() {
  g update-index --assume-unchanged $1
}

g_no_assume_unchaged() {
  g update-index --no-assume-unchanged $1
}

g_list_unchaged_files() {
  git ls-files -v | grep -E "^[a-z]"
}

g_restore_file() {
  local commit_hash=$1
  local file_path=$2

  if [[ -z $commit_hash ]]; then
    error "You must provide a commit hash as first argument"
    return 1
  fi
  if [[ -z $file_path ]]; then
    error "You must provide a file path as second argument"
    return 1
  fi

  g checkout ${commit_hash}^ -- ${file_path}
}

gcheckout() {
  git fetch origin $1 && git checkout $1
}
